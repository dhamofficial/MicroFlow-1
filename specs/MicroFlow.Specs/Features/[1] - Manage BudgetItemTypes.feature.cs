// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MicroFlow.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class _1_ManageBudgetItemTypesFeature : Xunit.IClassFixture<_1_ManageBudgetItemTypesFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "[1] - Manage BudgetItemTypes.feature"
#line hidden
        
        public _1_ManageBudgetItemTypesFeature(_1_ManageBudgetItemTypesFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "[1] - Manage BudgetItemTypes", "\tAs a budget owner,\r\n\tI need to manage budget item types,\r\n\tto structure my budge" +
                    "t", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="[1.1] - Add budget item types")]
        [Xunit.TraitAttribute("FeatureTitle", "[1] - Manage BudgetItemTypes")]
        [Xunit.TraitAttribute("Description", "[1.1] - Add budget item types")]
        public virtual void _1_1_AddBudgetItemTypes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[1.1] - Add budget item types", null, ((string[])(null)));
#line 7
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Order",
                        "Name",
                        "BudgetClass"});
            table1.AddRow(new string[] {
                        "1",
                        "Income type",
                        "Income"});
            table1.AddRow(new string[] {
                        "2",
                        "Expense type",
                        "Expense"});
            table1.AddRow(new string[] {
                        "3",
                        "Debt type",
                        "Debt"});
            table1.AddRow(new string[] {
                        "4",
                        "Savings type",
                        "Savings"});
            table1.AddRow(new string[] {
                        "5",
                        "Investment type",
                        "Investment"});
            table1.AddRow(new string[] {
                        "6",
                        "Tax type",
                        "Tax"});
#line 8
 testRunner.When("I add the following budget item types:", ((string)(null)), table1, "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Order",
                        "Name",
                        "BudgetClass"});
            table2.AddRow(new string[] {
                        "1",
                        "Income type",
                        "Income"});
            table2.AddRow(new string[] {
                        "2",
                        "Expense type",
                        "Expense"});
            table2.AddRow(new string[] {
                        "3",
                        "Debt type",
                        "Debt"});
            table2.AddRow(new string[] {
                        "4",
                        "Savings type",
                        "Savings"});
            table2.AddRow(new string[] {
                        "5",
                        "Investment type",
                        "Investment"});
            table2.AddRow(new string[] {
                        "6",
                        "Tax type",
                        "Tax"});
#line 17
 testRunner.Then("I should get these budget item types when I query:", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[1.2] - Update budget item types")]
        [Xunit.TraitAttribute("FeatureTitle", "[1] - Manage BudgetItemTypes")]
        [Xunit.TraitAttribute("Description", "[1.2] - Update budget item types")]
        public virtual void _1_2_UpdateBudgetItemTypes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[1.2] - Update budget item types", null, ((string[])(null)));
#line 27
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Order",
                        "Name",
                        "BudgetClass"});
            table3.AddRow(new string[] {
                        "1",
                        "Income type",
                        "Income"});
            table3.AddRow(new string[] {
                        "2",
                        "Expense type",
                        "Expense"});
#line 28
 testRunner.Given("I have the following budget item types:", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "FindByName",
                        "Order",
                        "Name",
                        "BudgetClass"});
            table4.AddRow(new string[] {
                        "Income type",
                        "3",
                        "Income type (updated)",
                        "Investment"});
            table4.AddRow(new string[] {
                        "Expense type",
                        "4",
                        "Expense type",
                        "Expense"});
#line 33
 testRunner.When("I update the following budget item types:", ((string)(null)), table4, "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Order",
                        "Name",
                        "BudgetClass"});
            table5.AddRow(new string[] {
                        "4",
                        "Expense type",
                        "Expense"});
            table5.AddRow(new string[] {
                        "3",
                        "Income type (updated)",
                        "Investment"});
#line 38
 testRunner.Then("I should get these budget item types when I query:", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[1.3] - Remove budget item types")]
        [Xunit.TraitAttribute("FeatureTitle", "[1] - Manage BudgetItemTypes")]
        [Xunit.TraitAttribute("Description", "[1.3] - Remove budget item types")]
        public virtual void _1_3_RemoveBudgetItemTypes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[1.3] - Remove budget item types", null, ((string[])(null)));
#line 44
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Order",
                        "Name",
                        "BudgetClass"});
            table6.AddRow(new string[] {
                        "1",
                        "Income type",
                        "Income"});
            table6.AddRow(new string[] {
                        "2",
                        "Expense type",
                        "Expense"});
            table6.AddRow(new string[] {
                        "3",
                        "Debt type",
                        "Debt"});
#line 45
 testRunner.Given("I have the following budget item types:", ((string)(null)), table6, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "FindByName"});
            table7.AddRow(new string[] {
                        "Income type"});
#line 51
 testRunner.When("I remove the following budget item types:", ((string)(null)), table7, "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Order",
                        "Name",
                        "BudgetClass"});
            table8.AddRow(new string[] {
                        "2",
                        "Expense type",
                        "Expense"});
            table8.AddRow(new string[] {
                        "3",
                        "Debt type",
                        "Debt"});
#line 55
 testRunner.Then("I should get these budget item types when I query:", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[1.4] - Validate budget item types on add")]
        [Xunit.TraitAttribute("FeatureTitle", "[1] - Manage BudgetItemTypes")]
        [Xunit.TraitAttribute("Description", "[1.4] - Validate budget item types on add")]
        public virtual void _1_4_ValidateBudgetItemTypesOnAdd()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[1.4] - Validate budget item types on add", null, ((string[])(null)));
#line 61
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Order",
                        "Name",
                        "BudgetClass"});
            table9.AddRow(new string[] {
                        "1",
                        "Income type",
                        "Income"});
            table9.AddRow(new string[] {
                        "2",
                        "Expense type",
                        "Expense"});
            table9.AddRow(new string[] {
                        "3",
                        "Debt type",
                        "Debt"});
#line 62
 testRunner.Given("I have the following budget item types:", ((string)(null)), table9, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Order",
                        "Name",
                        "BudgetClass",
                        "ValidationErrors"});
            table10.AddRow(new string[] {
                        "3",
                        "",
                        "Debt",
                        "BudgetItemTypeErrors-NameRequired"});
            table10.AddRow(new string[] {
                        "2",
                        "Expense type",
                        "Expense",
                        "BudgetItemTypeErrors-NameExists"});
#line 68
 testRunner.When("I try to add these budget item types I should get validation errors:", ((string)(null)), table10, "When ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[1.5] - Validate budget item types on update")]
        [Xunit.TraitAttribute("FeatureTitle", "[1] - Manage BudgetItemTypes")]
        [Xunit.TraitAttribute("Description", "[1.5] - Validate budget item types on update")]
        public virtual void _1_5_ValidateBudgetItemTypesOnUpdate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[1.5] - Validate budget item types on update", null, ((string[])(null)));
#line 74
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Order",
                        "Name",
                        "BudgetClass"});
            table11.AddRow(new string[] {
                        "1",
                        "Income type",
                        "Income"});
            table11.AddRow(new string[] {
                        "2",
                        "Expense type",
                        "Expense"});
            table11.AddRow(new string[] {
                        "3",
                        "Debt type",
                        "Debt"});
#line 75
 testRunner.Given("I have the following budget item types:", ((string)(null)), table11, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "FindByName",
                        "Order",
                        "Name",
                        "BudgetClass",
                        "ValidationErrors"});
            table12.AddRow(new string[] {
                        "Debt type",
                        "3",
                        "",
                        "Debt",
                        "BudgetItemTypeErrors-NameRequired"});
            table12.AddRow(new string[] {
                        "Income type",
                        "1",
                        "Expense type",
                        "Income",
                        "BudgetItemTypeErrors-NameExists"});
#line 81
 testRunner.When("I try to update these budget item types I should get validation errors:", ((string)(null)), table12, "When ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[1.6] - Catch concurrency conflicts")]
        [Xunit.TraitAttribute("FeatureTitle", "[1] - Manage BudgetItemTypes")]
        [Xunit.TraitAttribute("Description", "[1.6] - Catch concurrency conflicts")]
        public virtual void _1_6_CatchConcurrencyConflicts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[1.6] - Catch concurrency conflicts", null, ((string[])(null)));
#line 87
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Order",
                        "Name",
                        "BudgetClass"});
            table13.AddRow(new string[] {
                        "1",
                        "Income type",
                        "Income"});
            table13.AddRow(new string[] {
                        "2",
                        "Expense type",
                        "Expense"});
#line 88
 testRunner.Given("I have the following budget item types:", ((string)(null)), table13, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "FindByName",
                        "Order",
                        "Name",
                        "BudgetClass",
                        "Notes"});
            table14.AddRow(new string[] {
                        "Income type",
                        "1",
                        "Income type",
                        "Income",
                        "Failling update"});
#line 93
 testRunner.When("I try to update these budget item types after they\'ve been updated I should get a" +
                    " concurrency exception:", ((string)(null)), table14, "When ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "FindByName"});
            table15.AddRow(new string[] {
                        "Expense type"});
#line 97
 testRunner.When("I try to delete these budget item types after they\'ve been updated I should get a" +
                    " concurrency exception:", ((string)(null)), table15, "When ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                _1_ManageBudgetItemTypesFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                _1_ManageBudgetItemTypesFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
